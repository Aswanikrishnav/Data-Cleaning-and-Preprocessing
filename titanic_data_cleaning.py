# -*- coding: utf-8 -*-
"""Titanic Data cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aJ2TMbphgUMn4fZRjoexoiXQZ6m5ae11
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv("/content/Titanic-Dataset.csv")

"""# Exploring dataset"""

print(df.head())

print(df.info())

print(df.describe())

print(df.isnull().sum())

"""# Handling Missing Values"""

df['Age'] = df['Age'].fillna(df['Age'].median())

df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])

df = df.drop(columns=['Cabin'])

print(df.isnull().sum())

"""# Converting categorical variables to numericals"""

df['Sex'] = df['Sex'].map({'male':0, 'female':1})

df = pd.get_dummies(df, columns=['Embarked'], drop_first=True)

print(df.info())

"""# Normalize/Standardize Numerical values"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
df[['Age', 'Fare']] = scaler.fit_transform(df[['Age', 'Fare']])

print(df[['Age', 'Fare']].mean())
print(df[['Age', 'Fare']].std())

"""# Visualizing outliers by boxplot and removing"""

plt.boxplot(df['Age'].dropna(), vert=False)
plt.title("Age Outliers")
plt.show()

plt.boxplot(df['Fare'].dropna(), vert=False)
plt.title("Fare Outliers")
plt.show()

df_before = df.copy()


Q1_age = df['Age'].quantile(0.25)
Q3_age = df['Age'].quantile(0.75)
IQR_age = Q3_age - Q1_age
age_lower = Q1_age - 1.5*IQR_age
age_upper = Q3_age + 1.5*IQR_age


Q1_fare = df['Fare'].quantile(0.25)
Q3_fare = df['Fare'].quantile(0.75)
IQR_fare = Q3_fare - Q1_fare
fare_lower = Q1_fare - 1.5*IQR_fare
fare_upper = Q3_fare + 1.5*IQR_fare


df = df[(df['Age'] >= age_lower) & (df['Age'] <= age_upper) &
        (df['Fare'] >= fare_lower) & (df['Fare'] <= fare_upper)]

plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.boxplot(df['Age'], vert=False)
plt.title("Age After Outlier Removal")

plt.subplot(1,2,2)
plt.boxplot(df['Fare'], vert=False)
plt.title("Fare After Outlier Removal")

plt.show()

print("Rows removed:", len(df_before) - len(df))

